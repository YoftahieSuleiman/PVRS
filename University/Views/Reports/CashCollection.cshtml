
<div style="color: goldenrod; font-family: Verdana; font-size: larger; font-stretch: semi-condensed;"><b><u>Cash Collection report</u></b></div>
<script>
    function filterReport() {
        var va = validateForm();
        var temp = { branch: branch, from: from, to: to };
        if (va) {
            $("#reportcontent").empty().html('<img src="../Content/loading.gif" align="center" width="100%" height="500px" />');

            var dataString = {branch:branch,from:from,to:to};
          //  var dataString = $("#form0").serialize();

            var action = $("#form0").attr("action");


            $.ajax({
                type: "POST",
                url: action,
                async: false,
                data: dataString,
                dataType: "text", //change to your own, else read my note above on enabling the JsonValueProviderFactory in MVC
                //contentType: contentType,
                //processData: processData,
                success: function (data) {
                    $("#reportcontent").html(data);


                },
                error: function (jqXHR, textStatus, errorThrown) {
                    document.getElementById("reportcontent").innerHTML = errorThrown;

                }
            });
        }
        else {

        }
    }
</script>

@using (Ajax.BeginForm("CashCollectionFiltered", "Reports", new AjaxOptions { HttpMethod = "POST" }))
{
    string datefrom = "", dateto = "";
  
  
    if (TempData["datefrom"] != null)
    {
        datefrom = TempData["datefrom"].ToString();
    }
    if (TempData["dateto"] != null)
    {
        dateto = TempData["dateto"].ToString();
    }
   

    <div style="background-color:lightblue;padding:10px;  width: 100%">
        
      
        Branch: @Html.ListBox("Branch", (MultiSelectList)ViewBag.Branch, new
        {
            style = "width:500px;height:250px",
            @class = "selectpicker",
            data_show_subtext = "true",
            data_live_search = "true"
        })
       
       &nbsp;&nbsp;Date From: <input type='text' class="date-picker" name='from' id='from' value='@DateTime.Today.ToString("MM/dd/yyyy")' readonly /> &nbsp; To: <input type='text' class="date-picker" name='to' id='to' value='@DateTime.Today.ToString("MM/dd/yyyy")' readonly />&nbsp;&nbsp;<a href="#" class="linkEffect" onclick="filterReport();">Filter</a>

        <div style="color:red" id="errorMessage"></div>

        
    </div>
}

<div id="reportcontent">
    @*@model IEnumerable<University.ViewModels.MultiPurposeVM>*@
    @{
        ViewBag.Title = "Cash Collection Report";
        
    }
   
   

    <div style="overflow: auto; height: 80vh; width: 100%; padding: 5px">

       <button id='btnExport' onclick='fnExcelReport()' class='linkEffect'> EXPORT </button>
        <table border="1" id="datatable-buttons">
            <tr style="background-color: lightblue; font-weight: bolder">
                <th rowspan="1" colspan="1" style="text-align: center">
                    <b>Currency</b>
                </th>
                <th rowspan="1" colspan="1" style="text-align: center">
                    <b>Denomination</b>
                </th>
                @******************Header for list of branchs*@
                @{
                    
                    foreach (var branch in (IEnumerable<University.Models.luOperationalLimit>)ViewBag.BranchNames)
                    {
                        @Html.Raw("<th style='text-align: center'>" + branch.Branch_Name + "</th>");
                    }
                }
                @******************End header for list of branchs*@

                <th rowspan="1" colspan="1" style="text-align: center">
                    <b>Total Credit</b>
                </th>


            </tr>
            



            @{ int y = 0;
              
               IEnumerable<University.Models.DenominationDelivered> deliverds = (IEnumerable<University.Models.DenominationDelivered>)ViewBag.DenominationDelivereds;
               IEnumerable<University.Models.luNote> notes = (IEnumerable<University.Models.luNote>)ViewBag.Denominations;
               }
            @foreach (string currency in (List<string>)ViewBag.currencies)
            {
                List<University.Models.DenominationDelivered> delivered = (from r in deliverds where r.luNote.Currency == currency orderby r.luNote.Note select r).ToList();
                List<decimal> currencynotes = (from n in notes where n.Currency == currency orderby n.Note select n.Note).ToList();
                int j = 0;
                
                foreach (decimal note in currencynotes)
                {
                    y++;

                    if (y % 2 != 0)
                    {

                        @Html.Raw("<tr class='odd' role='row'>");
                    }
                    else
                    {
                        @Html.Raw("<tr class='even' role='row'>");
                    }
                    if (j == 0)
                    {
                        @Html.Raw("<td rowspan='" + (currencynotes.Count()+1) + "'>" + currency + "</td>"); 
                    }
                    if (j < currencynotes.Count())
                    {
                    @Html.Raw("<td>" + note + "</td>");
                    }

                    decimal totalCreditForNote = 0;
                    foreach (var branch in (IEnumerable<University.Models.luOperationalLimit>)ViewBag.BranchNames)
                    {
                        decimal totalNoteForBranch = (from d in deliverds where d.CashCollection.Branch==branch.Branch_code where d.luNote.Note==note where d.CashCollection.Currency==currency select d.Amount*d.luNote.Note).Sum();
                        totalCreditForNote += totalNoteForBranch;
                         @Html.Raw("<td>" + totalNoteForBranch.ToString("N2") + "</td>");

                    }
                    @Html.Raw("<td>" + totalCreditForNote.ToString("N2") + "</td>");
                    
                    j++;
                }
                if (y % 2 != 0)
                {

                    @Html.Raw("<tr class='odd' role='row'><td>Total</td>");
                }
                else
                {
                    @Html.Raw("<tr class='even' role='row'><td>Total</td>");
                }
                decimal totalcreditforall = 0;
                foreach (var branch in (IEnumerable<University.Models.luOperationalLimit>)ViewBag.BranchNames)
                {
                    decimal totalcreditforbranch = (from d in deliverds where d.CashCollection.Branch == branch.Branch_code  where d.CashCollection.Currency == currency select d.Amount * d.luNote.Note).Sum(); ;
                    totalcreditforall += totalcreditforbranch;
                    @Html.Raw("<td>" + totalcreditforbranch.ToString("N2") + "</td>");

                }
                @Html.Raw("<td>" + totalcreditforall.ToString("N2") + "</td></tr>");
                
            }



        </table>

    </div>

    <script type="text/javascript">

        //$("#UserId").selectpicker('render');
       // $("#asofdate").datepicker({ forceParse: false, todayHighlight: true, todayBtn: true, autoclose: true }).keyup(function (e) { if (e.keyCode == 8 || e.keyCode == 46) { this.value = ''; resetDate(this); } });
      //  $("#From").datepicker({ forceParse: false, todayHighlight: true, todayBtn: true, autoclose: true }).keyup(function (e) { if (e.keyCode == 8 || e.keyCode == 46) { this.value = ''; resetDate(this); } });
       // $("#To").datepicker({ forceParse: false, todayHighlight: true, todayBtn: true, autoclose: true }).keyup(function (e) { if (e.keyCode == 8 || e.keyCode == 46) { this.value = ''; resetDate(this); } });
        $(function () {

            // This will make every element with the class "date-picker" into a DatePicker element
            $('.date-picker').datepicker({
                format: "mm/dd/yyyy",
                autoclose: true
            });


        })
        var from = "";
        var to = "";
        var branch = "";
      
        function validateForm() {
            if (document.getElementById("from").value != "") {
                var date = document.getElementById("from").value.split("/");
                //from = date[1] + "/" + date[0] + "/" + date[2];
                from = document.getElementById("from").value;

            }
            if (document.getElementById("to").value != "") {
                var date = document.getElementById("to").value.split("/");
                //to = date[1] + "/" + date[0] + "/" + date[2];
                to = document.getElementById("to").value;
            }
            branch = $('#Branch').val();
            return true;
        }
       
        
       

        function fnExcelReport() {
            var tab_text = "<table border='2px'><tr bgcolor='#87AFC6'>";
            var textRange; var j = 0;
            tab = document.getElementById('datatable-buttons'); // id of table

            for (j = 0 ; j < tab.rows.length ; j++) {
                tab_text = tab_text + tab.rows[j].innerHTML + "</tr>";
                //tab_text=tab_text+"</tr>";
            }

            tab_text = tab_text + "</table>";
            tab_text = tab_text.replace(/<A[^>]*>|<\/A>/g, "");//remove if u want links in your table
            tab_text = tab_text.replace(/<img[^>]*>/gi, ""); // remove if u want images in your table
            tab_text = tab_text.replace(/<input[^>]*>|<\/input>/gi, ""); // reomves input params

            var ua = window.navigator.userAgent;
            var msie = ua.indexOf("MSIE ");

            if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))      // If Internet Explorer
            {
                txtArea1.document.open("txt/html", "replace");
                txtArea1.document.write(tab_text);
                txtArea1.document.close();
                txtArea1.focus();
                sa = txtArea1.document.execCommand("SaveAs", true, "Cash Collection.xlsx");
            }
            else                 //other browser not tested on IE 11
                sa = window.open('data:application/vnd.ms-excel,' + encodeURIComponent(tab_text));

            return (sa);
        }

    </script>

</div>
